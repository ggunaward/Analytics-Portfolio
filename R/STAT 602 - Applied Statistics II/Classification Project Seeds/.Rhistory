get.Bean.Cost <- function(BeanList, BeanKey){
temp.df <- left_join(BeanList, BeanKey, by='ClassID')
return(sum(temp.df$approx_dollars_per_seed, na.rm = TRUE))
}
#Compare weights of 2 samples of beans
compare.Bean.Weight <- function(BeanListActuals, BeanListPredicted, BeanKey){
beansActualWeight <- get.Bean.Weight(BeanListActuals, BeanKey)
beansPredictedWeight <- get.Bean.Weight(BeanListPredicted, BeanKey)
return(abs(beansActualWeight - beansPredictedWeight))
}
#Compare costs of 2 samples of beans
compare.Bean.Cost <- function(BeanListActuals, BeanListPredicted, BeanKey){
beansActualCost <- get.Bean.Cost(BeanListActuals, BeanKey)
beansPredictedCost <- get.Bean.Cost(BeanListPredicted, BeanKey)
return(abs(beansActualCost - beansPredictedCost))
}
# Create functions to calculate Z Scores, Skewness, and Kurtosis
# Z score function
ZScore.Solve <- function(x.dat, y_hat = mean(x.dat), s_dev = sd(x.dat)) {
z_score <- (x.dat - y_hat)/sqrt(s_dev)
return(z_score)
}
#Calculate Skewness function
Skewness.fun <- function(arrayOfValues){
mean.x <- 0
stDev.x <- 0
sum.x <- 0
skewness.x <- 0
kurtosis.x <- 0
runningCalcTotal1.x <- 0 #standard deviation
runningCalcTotal2.x <- 0 #skewness
runningCalcTotal3.x <- 0 #kurtosis
n <- 0
#Mean calculation
for (i in 1:length(arrayOfValues)){
if(!is.na(arrayOfValues[i])){
sum.x <- sum.x + arrayOfValues[i]
n <- n+1
}
}
mean.x <- sum.x/n
#Standard Deviation Calculation
for (i in 1:length(arrayOfValues)){
if(!is.na(arrayOfValues[i])){
runningCalcTotal1.x <- runningCalcTotal1.x + ((arrayOfValues[i]-mean.x) * (arrayOfValues[i]-mean.x))
}
}
stDev.x <- sqrt(runningCalcTotal1.x/(n-1))
#Fisher-Pearson  skewness Calculation
for (i in 1:length(arrayOfValues)){
if(!is.na(arrayOfValues[i])){
runningCalcTotal2.x <- (runningCalcTotal2.x + ((arrayOfValues[i]-mean.x) * (arrayOfValues[i]-mean.x)^2))
}
}
skewness.x <- ((runningCalcTotal2.x/n) / stDev.x^3)
return(skewness.x)
}
#Calculate Kurtosis function
Kurtosis.fun <- function(arrayOfValues){
mean.x <- 0
stDev.x <- 0
sum.x <- 0
skewness.x <- 0
kurtosis.x <- 0
runningCalcTotal1.x <- 0 #standard deviation
runningCalcTotal2.x <- 0 #skewness
runningCalcTotal3.x <- 0 #kurtosis
n <- 0
#Mean calculation
for (i in 1:length(arrayOfValues)){
if(!is.na(arrayOfValues[i])){
sum.x <- sum.x + arrayOfValues[i]
n <- n+1
}
}
mean.x <- sum.x/n
#Standard Deviation Calculation
for (i in 1:length(arrayOfValues)){
if(!is.na(arrayOfValues[i])){
runningCalcTotal1.x <- runningCalcTotal1.x + ((arrayOfValues[i]-mean.x) * (arrayOfValues[i]-mean.x))
}
}
stDev.x <- sqrt(runningCalcTotal1.x/(n-1))
#kurtosis Calculation
for (i in 1:length(arrayOfValues)){
if(!is.na(arrayOfValues[i])){
runningCalcTotal3.x <- (runningCalcTotal3.x + ((arrayOfValues[i]-mean.x) * (arrayOfValues[i]-mean.x)^3))
}
}
kurtosis.x <- ((runningCalcTotal3.x/n) / stDev.x^4)
return(kurtosis.x)
}
#Functions to convert Class Variable to and from a numeric ID
#Convert class names to class IDs and return all dependent and independent variables
convert.class.to.classID <- function(BeanData.df, BeanKey=BeanKey.df){
temp.1.df <- left_join(BeanData.df, BeanKey.df, by='Class')
return(subset(temp.1.df, select = c("Area","Perimeter","MajorAxisLength", "MinorAxisLength", "Eccentricity", "ConvexArea","Extent", "ClassID") ))
}
#Convert class ID to class names and return all dependent and independent variables
convert.classID.to.class <- function(BeanData.df, BeanKey=BeanKey.df){
temp.1.df <- left_join(BeanData.df, BeanKey.df, by='ClassID')
return(subset(temp.1.df, select = c("Area","Perimeter","MajorAxisLength", "MinorAxisLength", "Eccentricity", "ConvexArea","Extent", "Class") ))
}
#Convert class IDs to Class names and return the class names
convert.classID.to.class.2 <- function(BeanData.df, BeanKey=BeanKey.df){
temp.1.df <- left_join(BeanData.df, BeanKey.df, by='ClassID')
return(subset(temp.1.df, select = c("Class") ))
}
#Convert a factor of class IDs to Class Names and return the class names as a factor
convert.classID.to.class.2.factor <- function(BeanData, BeanKey=BeanKey.df){
tempBeanDf <- data.frame(ClassID = BeanData)
temp.1.df <- left_join(tempBeanDf, BeanKey.df, by='ClassID')
result <- factor(subset(temp.1.df, select = Class )$Class, levels = c("BOMBAY", "CALI", "DERMASON", "HOROZ", "SEKER", "SIRA"))
return(result)
}
#Create function to remove outliers
remove_outliers_beans_dataset <- function(x.df){
#Create temporary dataset with row numbers as a column
Data.All.df.No.Outliers.Temp <- x.df
Data.All.df.No.Outliers.Temp$row_names <- row.names(Data.All.df.No.Outliers.Temp)
Dependent.Var.Columns <-c("Area","Perimeter","MajorAxisLength", "MinorAxisLength", "Eccentricity", "ConvexArea","Extent")
for (i in Dependent.Var.Columns) {
#Identify the values in each aliquot that are outliers
Data.All.df.No.Outliers.Temp2 <- Data.All.df.No.Outliers.Temp %>%
group_by(Class) %>%
identify_outliers(all_of(i))
#Use recursion to rerun the function for identifying and removing outliers in case there are any left after each run
while (length(Data.All.df.No.Outliers.Temp2[,all_of(i)]) > 0)
{
# create a list of all row numbers that are outliers
list.outliers <- as.list(Data.All.df.No.Outliers.Temp2$row_names)
# Remove the outliers from the main dataset based on the row numbers of outliers list
Data.All.df.No.Outliers.Temp <- Data.All.df.No.Outliers.Temp[!Data.All.df.No.Outliers.Temp$row_names %in% list.outliers,]
#Identify the values in each aliquot that are outliers
Data.All.df.No.Outliers.Temp2 <- Data.All.df.No.Outliers.Temp %>%
group_by(Class) %>%
identify_outliers(all_of(i))
}
}
return(Data.All.df.No.Outliers.Temp)
}
#Display some of the created dataframes
print(BeanKey.df)
print(bean_column_descriptions.df)
#Check distribution between classes and look for class imbalance
#https://www.statology.org/r-frequency-table-by-group/
beanCounts <- SeedDataInitial.df %>%
group_by(Class) %>%
summarize(Freq=n())
print(beanCounts)
#Check distribution of data within classes and look for outliers that could be the result of an error
#https://r-graph-gallery.com/histogram_several_group.html
#https://cmdlinetips.com/2019/02/how-to-make-grouped-boxplots-with-ggplot2/
#Convert data to long format
SeedDataLong.df <- SeedDataInitial.df %>%                                   # Apply pivot_longer function
pivot_longer(c("Area","Perimeter", "MajorAxisLength", "MinorAxisLength", "Eccentricity", "ConvexArea", "Extent"), names_to = "variable")
#Plots
#Box plots of the dataset
for (var_ in unique(SeedDataLong.df$variable)) {
plotValue <- SeedDataLong.df %>%
filter(variable %in% var_) %>%
ggplot(aes(x=Class, y=value, fill=Class)) +
geom_boxplot() +
stat_boxplot(geom ='errorbar', width = 0.6) +
geom_jitter(width=0.1,alpha=0.2) +
labs(y=var_)
print(plotValue)
}
#Histograms of the dataset
for (var_ in unique(SeedDataLong.df$variable)) {
plotValue2 <- SeedDataLong.df %>%
filter(variable %in% var_) %>%
ggplot( aes(x=value, color=Class, fill=Class)) +
geom_histogram(alpha=0.6) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum(hrbrthemes.loadfonts=TRUE) +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
axis.text.x = element_text(angle=45)
) +
facet_wrap(~Class)+
labs(subtitle=var_)
print(plotValue2)
}
#Check distribution between classes and look for class imbalance
#https://www.statology.org/r-frequency-table-by-group/
beanCounts <- SeedDataInitial.df %>%
group_by(Class) %>%
summarize(Freq=n())
print(beanCounts)
#Check distribution of data within classes and look for outliers that could be the result of an error
#https://r-graph-gallery.com/histogram_several_group.html
#https://cmdlinetips.com/2019/02/how-to-make-grouped-boxplots-with-ggplot2/
#Convert data to long format
SeedDataLong.df <- SeedDataInitial.df %>%                                   # Apply pivot_longer function
pivot_longer(c("Area","Perimeter", "MajorAxisLength", "MinorAxisLength", "Eccentricity", "ConvexArea", "Extent"), names_to = "variable")
#Plots
#Box plots of the dataset
for (var_ in unique(SeedDataLong.df$variable)) {
plotValue <- SeedDataLong.df %>%
filter(variable %in% var_) %>%
ggplot(aes(x=Class, y=value, fill=Class)) +
geom_boxplot() +
stat_boxplot(geom ='errorbar', width = 0.6) +
geom_jitter(width=0.1,alpha=0.2) +
labs(y=var_)
print(plotValue)
}
#Histograms of the dataset
for (var_ in unique(SeedDataLong.df$variable)) {
plotValue2 <- SeedDataLong.df %>%
filter(variable %in% var_) %>%
ggplot( aes(x=value, color=Class, fill=Class)) +
geom_histogram(alpha=0.6) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
axis.text.x = element_text(angle=45)
) +
facet_wrap(~Class)+
labs(subtitle=var_)
print(plotValue2)
}
#View Kurtosis and Skewness of the dataset
Class_val <- list()
Variable_val <- list()
Skewness_val <- list()
Kurtosis_val <- list()
i <- 1
for (bean_ in unique(SeedDataLong.df$Class)){
for (var_ in unique(SeedDataLong.df$variable)){
Class_val[[i]] <- bean_
Variable_val[[i]] <- var_
Skewness_val[[i]] <- Skewness.fun(subset(SeedDataInitial.df, Class == bean_)[,var_])
Kurtosis_val[[i]] <- Kurtosis.fun(subset(SeedDataInitial.df, Class == bean_)[,var_])
i <- i + 1
}
}
#
# beanSkewnessKurtosis.df <- data.frame(Class = unlist(Class_val),
#                                       Variable = unlist(Variable_val),
#                                       Skewness = unlist(Skewness_val),
#                                       Kurtosis = unlist(Kurtosis_val)
#                                       )
# print(beanSkewnessKurtosis.df)
import_plex_sans()
#Check distribution between classes and look for class imbalance
#https://www.statology.org/r-frequency-table-by-group/
import_plex_sans()
beanCounts <- SeedDataInitial.df %>%
group_by(Class) %>%
summarize(Freq=n())
print(beanCounts)
#Check distribution of data within classes and look for outliers that could be the result of an error
#https://r-graph-gallery.com/histogram_several_group.html
#https://cmdlinetips.com/2019/02/how-to-make-grouped-boxplots-with-ggplot2/
#Convert data to long format
SeedDataLong.df <- SeedDataInitial.df %>%                                   # Apply pivot_longer function
pivot_longer(c("Area","Perimeter", "MajorAxisLength", "MinorAxisLength", "Eccentricity", "ConvexArea", "Extent"), names_to = "variable")
#Plots
#Box plots of the dataset
for (var_ in unique(SeedDataLong.df$variable)) {
plotValue <- SeedDataLong.df %>%
filter(variable %in% var_) %>%
ggplot(aes(x=Class, y=value, fill=Class)) +
geom_boxplot() +
stat_boxplot(geom ='errorbar', width = 0.6) +
geom_jitter(width=0.1,alpha=0.2) +
labs(y=var_)
print(plotValue)
}
#Histograms of the dataset
for (var_ in unique(SeedDataLong.df$variable)) {
plotValue2 <- SeedDataLong.df %>%
filter(variable %in% var_) %>%
ggplot( aes(x=value, color=Class, fill=Class)) +
geom_histogram(alpha=0.6) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
axis.text.x = element_text(angle=45)
) +
facet_wrap(~Class)+
labs(subtitle=var_)
print(plotValue2)
}
#View Kurtosis and Skewness of the dataset
Class_val <- list()
Variable_val <- list()
Skewness_val <- list()
Kurtosis_val <- list()
i <- 1
for (bean_ in unique(SeedDataLong.df$Class)){
for (var_ in unique(SeedDataLong.df$variable)){
Class_val[[i]] <- bean_
Variable_val[[i]] <- var_
Skewness_val[[i]] <- Skewness.fun(subset(SeedDataInitial.df, Class == bean_)[,var_])
Kurtosis_val[[i]] <- Kurtosis.fun(subset(SeedDataInitial.df, Class == bean_)[,var_])
i <- i + 1
}
}
#
# beanSkewnessKurtosis.df <- data.frame(Class = unlist(Class_val),
#                                       Variable = unlist(Variable_val),
#                                       Skewness = unlist(Skewness_val),
#                                       Kurtosis = unlist(Kurtosis_val)
#                                       )
# print(beanSkewnessKurtosis.df)
#Check distribution between classes and look for class imbalance
#https://www.statology.org/r-frequency-table-by-group/
# import_plex_sans()
beanCounts <- SeedDataInitial.df %>%
group_by(Class) %>%
summarize(Freq=n())
print(beanCounts)
#Check distribution of data within classes and look for outliers that could be the result of an error
#https://r-graph-gallery.com/histogram_several_group.html
#https://cmdlinetips.com/2019/02/how-to-make-grouped-boxplots-with-ggplot2/
#Convert data to long format
SeedDataLong.df <- SeedDataInitial.df %>%                                   # Apply pivot_longer function
pivot_longer(c("Area","Perimeter", "MajorAxisLength", "MinorAxisLength", "Eccentricity", "ConvexArea", "Extent"), names_to = "variable")
#Plots
#Box plots of the dataset
for (var_ in unique(SeedDataLong.df$variable)) {
plotValue <- SeedDataLong.df %>%
filter(variable %in% var_) %>%
ggplot(aes(x=Class, y=value, fill=Class)) +
geom_boxplot() +
stat_boxplot(geom ='errorbar', width = 0.6) +
geom_jitter(width=0.1,alpha=0.2) +
labs(y=var_)
print(plotValue)
}
#Histograms of the dataset
for (var_ in unique(SeedDataLong.df$variable)) {
plotValue2 <- SeedDataLong.df %>%
filter(variable %in% var_) %>%
ggplot( aes(x=value, color=Class, fill=Class)) +
geom_histogram(alpha=0.6) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
# theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
axis.text.x = element_text(angle=45)
) +
facet_wrap(~Class)+
labs(subtitle=var_)
print(plotValue2)
}
#View Kurtosis and Skewness of the dataset
Class_val <- list()
Variable_val <- list()
Skewness_val <- list()
Kurtosis_val <- list()
i <- 1
for (bean_ in unique(SeedDataLong.df$Class)){
for (var_ in unique(SeedDataLong.df$variable)){
Class_val[[i]] <- bean_
Variable_val[[i]] <- var_
Skewness_val[[i]] <- Skewness.fun(subset(SeedDataInitial.df, Class == bean_)[,var_])
Kurtosis_val[[i]] <- Kurtosis.fun(subset(SeedDataInitial.df, Class == bean_)[,var_])
i <- i + 1
}
}
#
# beanSkewnessKurtosis.df <- data.frame(Class = unlist(Class_val),
#                                       Variable = unlist(Variable_val),
#                                       Skewness = unlist(Skewness_val),
#                                       Kurtosis = unlist(Kurtosis_val)
#                                       )
# print(beanSkewnessKurtosis.df)
knit_with_parameters("~/Portfolio/R/STAT 602 - Applied Statistics II/Classification Project Seeds/Stat 602 Midterm Annotated Code - Gavin Gunawardena.Rmd")
#Check distribution between classes and look for class imbalance
#https://www.statology.org/r-frequency-table-by-group/
# import_plex_sans()
beanCounts <- SeedDataInitial.df %>%
group_by(Class) %>%
summarize(Freq=n())
print(beanCounts)
#Check distribution of data within classes and look for outliers that could be the result of an error
#https://r-graph-gallery.com/histogram_several_group.html
#https://cmdlinetips.com/2019/02/how-to-make-grouped-boxplots-with-ggplot2/
#Convert data to long format
SeedDataLong.df <- SeedDataInitial.df %>%                                   # Apply pivot_longer function
pivot_longer(c("Area","Perimeter", "MajorAxisLength", "MinorAxisLength", "Eccentricity", "ConvexArea", "Extent"), names_to = "variable")
#Plots
#Box plots of the dataset
for (var_ in unique(SeedDataLong.df$variable)) {
plotValue <- SeedDataLong.df %>%
filter(variable %in% var_) %>%
ggplot(aes(x=Class, y=value, fill=Class)) +
geom_boxplot() +
stat_boxplot(geom ='errorbar', width = 0.6) +
geom_jitter(width=0.1,alpha=0.2) +
labs(y=var_)
print(plotValue)
}
#Histograms of the dataset
for (var_ in unique(SeedDataLong.df$variable)) {
plotValue2 <- SeedDataLong.df %>%
filter(variable %in% var_) %>%
ggplot( aes(x=value, color=Class, fill=Class, binwidth = 25)) +
geom_histogram(alpha=0.6) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
# theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
axis.text.x = element_text(angle=45)
) +
facet_wrap(~Class)+
labs(subtitle=var_)
print(plotValue2)
}
#View Kurtosis and Skewness of the dataset
Class_val <- list()
Variable_val <- list()
Skewness_val <- list()
Kurtosis_val <- list()
i <- 1
for (bean_ in unique(SeedDataLong.df$Class)){
for (var_ in unique(SeedDataLong.df$variable)){
Class_val[[i]] <- bean_
Variable_val[[i]] <- var_
Skewness_val[[i]] <- Skewness.fun(subset(SeedDataInitial.df, Class == bean_)[,var_])
Kurtosis_val[[i]] <- Kurtosis.fun(subset(SeedDataInitial.df, Class == bean_)[,var_])
i <- i + 1
}
}
#
# beanSkewnessKurtosis.df <- data.frame(Class = unlist(Class_val),
#                                       Variable = unlist(Variable_val),
#                                       Skewness = unlist(Skewness_val),
#                                       Kurtosis = unlist(Kurtosis_val)
#                                       )
# print(beanSkewnessKurtosis.df)
#Check distribution between classes and look for class imbalance
#https://www.statology.org/r-frequency-table-by-group/
# import_plex_sans()
beanCounts <- SeedDataInitial.df %>%
group_by(Class) %>%
summarize(Freq=n())
print(beanCounts)
#Check distribution of data within classes and look for outliers that could be the result of an error
#https://r-graph-gallery.com/histogram_several_group.html
#https://cmdlinetips.com/2019/02/how-to-make-grouped-boxplots-with-ggplot2/
#Convert data to long format
SeedDataLong.df <- SeedDataInitial.df %>%                                   # Apply pivot_longer function
pivot_longer(c("Area","Perimeter", "MajorAxisLength", "MinorAxisLength", "Eccentricity", "ConvexArea", "Extent"), names_to = "variable")
#Plots
#Box plots of the dataset
for (var_ in unique(SeedDataLong.df$variable)) {
plotValue <- SeedDataLong.df %>%
filter(variable %in% var_) %>%
ggplot(aes(x=Class, y=value, fill=Class, binwidth = 25)) +
geom_boxplot() +
stat_boxplot(geom ='errorbar', width = 0.6) +
geom_jitter(width=0.1,alpha=0.2) +
labs(y=var_)
print(plotValue)
}
#Histograms of the dataset
for (var_ in unique(SeedDataLong.df$variable)) {
plotValue2 <- SeedDataLong.df %>%
filter(variable %in% var_) %>%
ggplot( aes(x=value, color=Class, fill=Class)) +
geom_histogram(alpha=0.6) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
# theme_ipsum() +
theme(
legend.position="none",
panel.spacing = unit(0.1, "lines"),
axis.text.x = element_text(angle=45)
) +
facet_wrap(~Class)+
labs(subtitle=var_)
print(plotValue2)
}
#View Kurtosis and Skewness of the dataset
Class_val <- list()
Variable_val <- list()
Skewness_val <- list()
Kurtosis_val <- list()
i <- 1
for (bean_ in unique(SeedDataLong.df$Class)){
for (var_ in unique(SeedDataLong.df$variable)){
Class_val[[i]] <- bean_
Variable_val[[i]] <- var_
Skewness_val[[i]] <- Skewness.fun(subset(SeedDataInitial.df, Class == bean_)[,var_])
Kurtosis_val[[i]] <- Kurtosis.fun(subset(SeedDataInitial.df, Class == bean_)[,var_])
i <- i + 1
}
}
#
# beanSkewnessKurtosis.df <- data.frame(Class = unlist(Class_val),
#                                       Variable = unlist(Variable_val),
#                                       Skewness = unlist(Skewness_val),
#                                       Kurtosis = unlist(Kurtosis_val)
#                                       )
# print(beanSkewnessKurtosis.df)
